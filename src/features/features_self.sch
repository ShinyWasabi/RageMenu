USING "core_math.sch"
USING "util_vehicle.sch"

CONST_FLOAT NO_CLIP_SPEED 1.0

STRUCT NO_CLIP_DATA
    FLOAT fCurrentSpeedMult
    BOOL bLastNoClip
    ENTITY_INDEX eLastNoClipEntity = NULL
ENDSTRUCT

NO_CLIP_DATA sNoClipData

PROC FEATURES_SELF_HEAL()
    SET_ENTITY_HEALTH(PLAYER_PED_ID(), GET_PED_MAX_HEALTH(PLAYER_PED_ID()), NULL, 0)
    SET_PED_ARMOUR(PLAYER_PED_ID(), GET_PLAYER_MAX_ARMOUR(PLAYER_ID()))
ENDPROC

PROC FEATURES_SELF_SUICIDE()
    SET_ENTITY_HEALTH(PLAYER_PED_ID(), 0, NULL, 0)
ENDPROC

PROC FEATURES_SELF_CLEAR()
    CLEAR_PED_BLOOD_DAMAGE(PLAYER_PED_ID())
    CLEAR_PED_WETNESS(PLAYER_PED_ID())
    CLEAR_PED_ENV_DIRT(PLAYER_PED_ID())
    RESET_PED_VISIBLE_DAMAGE(PLAYER_PED_ID())
ENDPROC

PROC FEATURES_SELF_SKIP_CUTSCENE()
    STOP_CUTSCENE_IMMEDIATELY()
ENDPROC

PROC FEATURES_SELF_REMOVE_BLACK_SCREEN()
    DO_SCREEN_FADE_IN(0)
    SET_PLAYER_CONTROL(PLAYER_ID(), TRUE, 0)
    FREEZE_ENTITY_POSITION(PLAYER_PED_ID(), FALSE)
    FORCE_GAME_STATE_PLAYING()
    IF IS_PED_IN_ANY_VEHICLE(PLAYER_PED_ID(), FALSE)
    	CLEAR_PED_TASKS_IMMEDIATELY(PLAYER_PED_ID())
    ENDIF
    DISPLAY_RADAR(TRUE)
    DISPLAY_HUD(TRUE)
ENDPROC

PROC FEATURES_SELF_REFRESH_INTERIOR()
    INTERIOR_INDEX iiInterior = GET_INTERIOR_AT_COORDS(GET_ENTITY_COORDS(PLAYER_PED_ID(), TRUE))
    REFRESH_INTERIOR(iiInterior)
ENDPROC

PROC FEATURES_SELF_GODMODE(BOOL bEnabled)
    SET_ENTITY_INVINCIBLE(PLAYER_PED_ID(), bEnabled, FALSE)
ENDPROC

PROC FEATURES_SELF_INVISIBILITY(BOOL bEnabled)
    SET_ENTITY_VISIBLE(PLAYER_PED_ID(), NOT bEnabled, FALSE)
ENDPROC

PROC FEATURES_SELF_NO_CLIP(BOOL bShouldRun)
    ENTITY_INDEX eNoClipEntity = PLAYER_PED_ID()

    IF IS_PED_IN_ANY_VEHICLE(PLAYER_PED_ID(), TRUE)
        eNoClipEntity = UTIL_VEHICLE_GET_CURRENT()
    ENDIF

    IF (NOT bShouldRun AND sNoClipData.bLastNoClip) OR ((sNoClipData.eLastNoClipEntity <> eNoClipEntity) AND bShouldRun AND (sNoClipData.eLastNoClipEntity <> NULL))
        FREEZE_ENTITY_POSITION(sNoClipData.eLastNoClipEntity, FALSE)
        SET_ENTITY_COLLISION(sNoClipData.eLastNoClipEntity, TRUE, FALSE)
    ENDIF

    sNoClipData.eLastNoClipEntity = eNoClipEntity

    IF bShouldRun
        DISABLE_CONTROL_ACTION(PLAYER_CONTROL, INPUT_SPRINT, TRUE)
        DISABLE_CONTROL_ACTION(PLAYER_CONTROL, INPUT_MOVE_UP_ONLY, TRUE)
        DISABLE_CONTROL_ACTION(PLAYER_CONTROL, INPUT_MOVE_DOWN_ONLY, TRUE)
        DISABLE_CONTROL_ACTION(PLAYER_CONTROL, INPUT_MOVE_LEFT_ONLY, TRUE)
        DISABLE_CONTROL_ACTION(PLAYER_CONTROL, INPUT_MOVE_RIGHT_ONLY, TRUE)
        DISABLE_CONTROL_ACTION(PLAYER_CONTROL, INPUT_DUCK, TRUE)

        SET_ENTITY_COLLISION(eNoClipEntity, FALSE, FALSE)

        VECTOR vVel = <<0.0, 0.0, 0.0>>
        IF IS_DISABLED_CONTROL_PRESSED(PLAYER_CONTROL, INPUT_SPRINT)
            vVel.z += NO_CLIP_SPEED / 2
        ENDIF
        IF IS_DISABLED_CONTROL_PRESSED(PLAYER_CONTROL, INPUT_DUCK)
            vVel.z -= NO_CLIP_SPEED / 2
        ENDIF
        IF IS_DISABLED_CONTROL_PRESSED(PLAYER_CONTROL, INPUT_MOVE_UP_ONLY)
            vVel.y += NO_CLIP_SPEED
        ENDIF
        IF IS_DISABLED_CONTROL_PRESSED(PLAYER_CONTROL, INPUT_MOVE_DOWN_ONLY)
            vVel.y -= NO_CLIP_SPEED
        ENDIF
        IF IS_DISABLED_CONTROL_PRESSED(PLAYER_CONTROL, INPUT_MOVE_LEFT_ONLY)
            vVel.x -= NO_CLIP_SPEED
        ENDIF
        IF IS_DISABLED_CONTROL_PRESSED(PLAYER_CONTROL, INPUT_MOVE_RIGHT_ONLY)
            vVel.x += NO_CLIP_SPEED
        ENDIF

        VECTOR vCamRot = GET_GAMEPLAY_CAM_ROT(0)
        vCamRot.x = 0
        SET_ENTITY_ROTATION(eNoClipEntity, vCamRot, 2, TRUE)

        IF MATH_IS_VECTOR_ZERO(vVel)
            FREEZE_ENTITY_POSITION(eNoClipEntity, TRUE)
            sNoClipData.fCurrentSpeedMult = 0.0
        ELSE
            IF sNoClipData.fCurrentSpeedMult < 20.0
                sNoClipData.fCurrentSpeedMult += 0.15
            ENDIF

            FREEZE_ENTITY_POSITION(eNoClipEntity, FALSE)

            BOOL bIsAiming = IS_DISABLED_CONTROL_PRESSED(PLAYER_CONTROL, INPUT_AIM)
            IF bIsAiming OR GET_FOLLOW_PED_CAM_VIEW_MODE() = FIRST_PERSON
                vVel = vVel * 0.10

                VECTOR vOffset = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(eNoClipEntity, <<vVel.x * sNoClipData.fCurrentSpeedMult, vVel.y * sNoClipData.fCurrentSpeedMult, vVel.z * sNoClipData.fCurrentSpeedMult>>)

                SET_ENTITY_VELOCITY(eNoClipEntity, <<0, 0, 0>>)
                SET_ENTITY_COORDS_NO_OFFSET(eNoClipEntity, vOffset, TRUE, TRUE, TRUE)
            ELSE
                vVel *= <<20, 20, 20>>

                VECTOR vLocation = GET_ENTITY_COORDS(eNoClipEntity, TRUE)
                VECTOR vOffset = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(eNoClipEntity, <<vVel.x, vVel.y, 0>>)
                vVel.x = vOffset.x - vLocation.x
                vVel.y = vOffset.y - vLocation.y

                SET_ENTITY_MAX_SPEED(eNoClipEntity, 999999999)
                SET_ENTITY_VELOCITY(eNoClipEntity, vVel * sNoClipData.fCurrentSpeedMult)
            ENDIF
        ENDIF
    ENDIF

    sNoClipData.bLastNoClip = bShouldRun
ENDPROC

PROC FEATURES_SELF_NO_RAGDOLL(BOOL bEnabled)
    SET_PED_CAN_RAGDOLL(PLAYER_PED_ID(), bEnabled)
ENDPROC

PROC FEATURES_SELF_FAST_RUN(BOOL bEnabled)
    IF bEnabled
	    SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(PLAYER_ID(), 1.49)
	ELSE
	    SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(PLAYER_ID(), 1.0)
    ENDIF
ENDPROC

PROC FEATURES_SELF_FAST_SWIM(BOOL bEnabled)
    IF bEnabled
        SET_SWIM_MULTIPLIER_FOR_PLAYER(PLAYER_ID(), 1.49)
    ELSE
        SET_SWIM_MULTIPLIER_FOR_PLAYER(PLAYER_ID(), 1.0)
    ENDIF
ENDPROC

PROC FEATURES_SELF_SUPER_JUMP()
    SET_SUPER_JUMP_THIS_FRAME(PLAYER_ID())
ENDPROC

PROC FEATURES_SELF_UNLIMITED_OXYGEN(BOOL bEnabled)
    IF bEnabled
        SET_PED_MAX_TIME_UNDERWATER(PLAYER_PED_ID(), INT_MAX)
    ELSE
        SET_PED_MAX_TIME_UNDERWATER(PLAYER_PED_ID(), -1.0)
    ENDIF
ENDPROC

PROC FEATURES_SELF_UNLIMITED_ABILITY()
    SPECIAL_ABILITY_CHARGE_ABSOLUTE(PLAYER_ID(), 200, TRUE, 0)
ENDPROC

PROC FEATURES_SELF_SET_WANTED_LEVEL(INT iWantedLevel)
    SET_PLAYER_WANTED_LEVEL(PLAYER_ID(), iWantedLevel, FALSE)
    SET_PLAYER_WANTED_LEVEL_NOW(PLAYER_ID(), FALSE)
ENDPROC

PROC FEATURES_SELF_NEVER_WANTED(BOOL bEnabled)
    IF bEnabled
        SET_MAX_WANTED_LEVEL(0)
        FEATURES_SELF_SET_WANTED_LEVEL(0)
    ELSE
        SET_MAX_WANTED_LEVEL(5)
    ENDIF
ENDPROC
