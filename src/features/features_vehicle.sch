USING "core_menu.sch" // Importing these two here is bad
USING "core_globals.sch"
USING "util_vehicle.sch"
USING "util_teleport.sch"

CONST_FLOAT HORN_BOOST_SPEED_DEFAULT   10.0
CONST_FLOAT HORN_BOOST_SPEED_MAX       200.0
CONST_FLOAT HORN_BOOST_SPEED_INCREMENT 0.3
FLOAT fHornBoostSpeed = HORN_BOOST_SPEED_DEFAULT

PROC FEATURES_VEHICLE_REPAIR()
	SET_VEHICLE_FIXED(UTIL_VEHICLE_GET_CURRENT())
	SET_ENTITY_HEALTH(UTIL_VEHICLE_GET_CURRENT(), 1000, NULL, 0)
	SET_VEHICLE_ENGINE_HEALTH(UTIL_VEHICLE_GET_CURRENT(), 1000.0)
	SET_VEHICLE_PETROL_TANK_HEALTH(UTIL_VEHICLE_GET_CURRENT(), 1000.0)
	SET_VEHICLE_DIRT_LEVEL(UTIL_VEHICLE_GET_CURRENT(), 0.0)
	REMOVE_DECALS_FROM_VEHICLE(UTIL_VEHICLE_GET_CURRENT())
	FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(UTIL_VEHICLE_GET_CURRENT())
	/*IF GET_ENTITY_MODEL(UTIL_VEHICLE_GET_CURRENT()) = HASH("brawler")
		SET_VEHICLE_ON_GROUND_PROPERLY(UTIL_VEHICLE_GET_CURRENT(), 1084227584)
		ACTIVATE_PHYSICS(UTIL_VEHICLE_GET_CURRENT())
	ENDIF*/
ENDPROC

PROC FEATURES_VEHICLE_MAX_MODS(VEHICLE_INDEX viVehicle)
    IF NOT DOES_ENTITY_EXIST(viVehicle)
        EXIT
    ENDIF

    SET_VEHICLE_MOD_KIT(viVehicle, 0)
    TOGGLE_VEHICLE_MOD(viVehicle, MOD_TURBO, TRUE)
    TOGGLE_VEHICLE_MOD(viVehicle, MOD_TYRE_SMOKE, TRUE)
    TOGGLE_VEHICLE_MOD(viVehicle, MOD_XENON_LIGHTS, TRUE)
    SET_VEHICLE_WINDOW_TINT(viVehicle, 1)
    SET_VEHICLE_TYRES_CAN_BURST(viVehicle, FALSE)
    
    VEHICLE_MOD_TYPE eSlot
    FOR eSlot = MOD_SPOILERS TO MOD_LIVERY
        IF eSlot <> MOD_LIVERY
            INT iCount = GET_NUM_VEHICLE_MODS(viVehicle, eSlot)
            IF iCount > 0
                IF NOT IS_VEHICLE_MOD_GEN9_EXCLUSIVE(viVehicle, eSlot, iCount - 1)
                    SET_VEHICLE_MOD(viVehicle, eSlot, iCount - 1, TRUE)
                ENDIF
            ENDIF
        ENDIF
    ENDFOR
ENDPROC

PROC FEATURES_VEHICLE_TELEPORT_INTO_PV()
    VECTOR vLocation = <<0.0, 0.0, 0.0>>
    IF UTIL_TELEPORT_GET_BLIP_LOCATION(vLocation, RADAR_GANG_VEHICLE)
        UTIL_TELEPORT_LOAD_GROUND_AT_3DCOORD(vLocation)
		
        VEHICLE_INDEX viVehicle = GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(UTIL_TELEPORT_GET_ENTITY_FROM_CLOSEST_BLIP(RADAR_GANG_VEHICLE))
        SET_PED_COORDS_KEEP_VEHICLE(PLAYER_PED_ID(), vLocation)
        SET_PED_INTO_VEHICLE(PLAYER_PED_ID(), viVehicle, -1)
    ENDIF
ENDPROC

PROC FEATURES_VEHICLE_BRING(VEHICLE_INDEX viVehicle)
    IF NOT IS_ENTITY_A_VEHICLE(viVehicle)
        EXIT
    ENDIF

    VECTOR vVehicleLocation = GET_ENTITY_COORDS(viVehicle, TRUE)
    UTIL_TELEPORT_LOAD_GROUND_AT_3DCOORD(vVehicleLocation)

    VECTOR vPedLocation = GET_ENTITY_COORDS(PLAYER_PED_ID(), TRUE)
    SET_ENTITY_COORDS(viVehicle, <<vPedLocation.x, vPedLocation.y, vPedLocation.z + 1.0>>, TRUE, FALSE, FALSE, TRUE)
    SET_ENTITY_HEADING(viVehicle, GET_ENTITY_HEADING(PLAYER_PED_ID()))

    INT iCount = 0
    WHILE iCount < 100 AND GET_DISTANCE_BETWEEN_COORDS(vPedLocation, GET_ENTITY_COORDS(viVehicle, TRUE), TRUE) > 10.0
        iCount++
        WAIT(0)
    ENDWHILE

    PED_INDEX piDriverPed = GET_PED_IN_VEHICLE_SEAT(viVehicle, -1, FALSE)
    IF DOES_ENTITY_EXIST(piDriverPed)
        IF GET_PED_TYPE(piDriverPed) = PED_TYPE_NETWORK_PLAYER
            CLEAR_PED_TASKS_IMMEDIATELY(piDriverPed)
        ELSE
            DELETE_PED(piDriverPed)
        ENDIF
    ENDIF

    SET_PED_INTO_VEHICLE(PLAYER_PED_ID(), viVehicle, -1)
ENDPROC

PROC FEATURES_VEHICLE_GODMODE(BOOL bEnabled)
    SET_ENTITY_INVINCIBLE(UTIL_VEHICLE_GET_CURRENT(), bEnabled, FALSE)
ENDPROC

PROC FEATURES_VEHICLE_SEATBELT(BOOL bEnabled)
    IF bEnabled
        SET_PED_CONFIG_FLAG(PLAYER_PED_ID(), CPED_CONFIG_FLAG_WillFlyThruWindscreen, FALSE)
        SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(PLAYER_PED_ID(), KNOCKOFFVEHICLE_NEVER)
    ELSE
        SET_PED_CONFIG_FLAG(PLAYER_PED_ID(), CPED_CONFIG_FLAG_WillFlyThruWindscreen, TRUE)
        SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(PLAYER_PED_ID(), KNOCKOFFVEHICLE_DEFAULT)
    ENDIF
ENDPROC

PROC FEATURES_VEHICLE_HORN_BOOST()
    IF UTIL_VEHICLE_GET_CURRENT() = NULL
        fHornBoostSpeed = HORN_BOOST_SPEED_DEFAULT
        EXIT
    ENDIF
    
    IF IS_CONTROL_JUST_PRESSED(PLAYER_CONTROL, INPUT_VEH_HORN)
        fHornBoostSpeed = GET_ENTITY_SPEED(UTIL_VEHICLE_GET_CURRENT())
    ENDIF
    
    IF IS_CONTROL_PRESSED(PLAYER_CONTROL, INPUT_VEH_HORN)
        IF fHornBoostSpeed < HORN_BOOST_SPEED_MAX
            fHornBoostSpeed += HORN_BOOST_SPEED_INCREMENT
        ENDIF
        
        VECTOR vel = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(UTIL_VEHICLE_GET_CURRENT(), <<0.0, fHornBoostSpeed, 0.0>>) - GET_ENTITY_COORDS(UTIL_VEHICLE_GET_CURRENT(), FALSE)
        SET_ENTITY_VELOCITY(UTIL_VEHICLE_GET_CURRENT(), vel)
    ELIF IS_CONTROL_JUST_RELEASED(PLAYER_CONTROL, INPUT_VEH_HORN)
        fHornBoostSpeed = HORN_BOOST_SPEED_DEFAULT
    ENDIF
ENDPROC

PROC FEATURES_VEHICLE_SPEEDO_METER()
    IF NOT IS_PED_IN_ANY_VEHICLE(PLAYER_PED_ID(), FALSE) OR IS_PAUSE_MENU_ACTIVE() OR IS_WARNING_MESSAGE_ACTIVE() OR IS_SCREEN_FADED_OUT() OR IS_SCREEN_FADING_OUT() OR IS_SCREEN_FADING_IN()
        EXIT
    ENDIF
	
    SET_TEXT_RENDER_ID(1)
    SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(TRUE)
    SET_SCRIPT_GFX_DRAW_ORDER(0)
	
    SET_TEXT_FONT(2)
    SET_TEXT_SCALE(0.9, 0.9)
    SET_TEXT_OUTLINE()
    BEGIN_TEXT_COMMAND_DISPLAY_TEXT("STRING")
    ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("KPH")
    END_TEXT_COMMAND_DISPLAY_TEXT(0.9, 0.72, 1)
	
    FLOAT fVehicleSpeed = (GET_ENTITY_SPEED(UTIL_VEHICLE_GET_CURRENT()) * 3.6)
    SET_TEXT_FONT(2)
    SET_TEXT_SCALE(0.9, 0.9)
    SET_TEXT_OUTLINE()
    BEGIN_TEXT_COMMAND_DISPLAY_TEXT("NUMBER")
    ADD_TEXT_COMPONENT_INTEGER(ROUND(fVehicleSpeed))
    END_TEXT_COMMAND_DISPLAY_TEXT(0.903, 0.76, 1)
ENDPROC

PROC FEATURES_VEHICLE_SPAWN_VEHICLE(INT iVehicleModel)
    VEHICLE_INDEX viVeh = UTIL_VEHICLE_SPAWN(iVehicleModel, UTIL_VEHICLE_GET_SPAWN_LOCATION(iVehicleModel), GET_ENTITY_HEADING(PLAYER_PED_ID()))
    IF viVeh <> NULL
        SET_VEHICLE_IS_STOLEN(viVeh, FALSE)
        SET_PED_INTO_VEHICLE(PLAYER_PED_ID(), viVeh, -1)
        SET_MODEL_AS_NO_LONGER_NEEDED(iVehicleModel)
        SET_VEHICLE_AS_NO_LONGER_NEEDED(viVeh)
    ENDIF
ENDPROC

PROC FEATURES_VEHICLE_PREVIEW_VEHICLE()
    IF NOT MENU_IS_OPEN() OR NOT MENU_BEGIN_SUBMENU(SUBMENUS_VEHICLE_CLASS) OR (sVehiclePreviewData.iLastModelHash <> 0 AND sVehiclePreviewData.iModelHash <> sVehiclePreviewData.iLastModelHash)
        UTIL_VEHICLE_CLEANUP_PREVIEW()
        g_sFeatures.sVehicleFeatures.bShouldPreview = FALSE
        EXIT
    ENDIF
	
    VECTOR vLocation
    IF sVehiclePreviewData.viVehicle = NULL
        sVehiclePreviewData.viVehicle = UTIL_VEHICLE_SPAWN(sVehiclePreviewData.iModelHash, vLocation, 0.0, FALSE)
        IF sVehiclePreviewData.viVehicle = NULL
            EXIT // retry
        ENDIF
		
        SET_MODEL_AS_NO_LONGER_NEEDED(sVehiclePreviewData.iModelHash)
		
        sVehiclePreviewData.iLastModelHash = sVehiclePreviewData.iModelHash
        sVehiclePreviewData.fHeading = 0.0
        sVehiclePreviewData.iRotationStartTime = GET_GAME_TIMER()
		
        FREEZE_ENTITY_POSITION(sVehiclePreviewData.viVehicle, TRUE)
        SET_ENTITY_ALPHA(sVehiclePreviewData.viVehicle, 200, FALSE)
        SET_ENTITY_COLLISION(sVehiclePreviewData.viVehicle, FALSE, FALSE)
        SET_ENTITY_CAN_BE_DAMAGED(sVehiclePreviewData.viVehicle, FALSE)
        SET_ENTITY_PROOFS(sVehiclePreviewData.viVehicle, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)
        SET_CAN_CLIMB_ON_ENTITY(sVehiclePreviewData.viVehicle, FALSE)
    ENDIF
	
    vLocation = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER_PED_ID(), <<0.0, 10.0, 0.5>>)
    SET_ENTITY_HEADING(sVehiclePreviewData.viVehicle, sVehiclePreviewData.fHeading)
    SET_ENTITY_COORDS(sVehiclePreviewData.viVehicle, vLocation, FALSE, FALSE, FALSE, FALSE)
	
    INT iDeltaTime = GET_GAME_TIMER() - sVehiclePreviewData.iRotationStartTime
    sVehiclePreviewData.fHeading = TO_FLOAT(iDeltaTime) * 0.036
ENDPROC
